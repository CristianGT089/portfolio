---
import '@fontsource-variable/fredoka';


interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body id="stars" class="bg-black">
		<slot />
	</body>
</html>
<style is:global>
	:root {
		/*color-scheme: light dark;*/
	}

	html {
		font-family: 'Fredoka Variable', system-ui, sans-serif;
		scroll-behavior: smooth;
	}

	body {
		display: flex;
		justify-content: center;
		min-height: 100vh;
	}

	@media (prefers-reduce-motion: reduce) {
		html {
			scroll-behavior: auto;
		}
	}

</style>
<!--<script>
	const starContainer = document.getElementById("stars");

	// Crear estrellas con animación
	const createStar = () => {
		const star = document.createElement("div");
		const size = Math.random() * 2 + 1; // Tamaño aleatorio entre 1px y 3px
		const positionX = Math.random() * window.innerWidth; // Posición horizontal aleatoria
		const duration = Math.random() * 3 + 30; // Duración aleatoria entre 2s y 5s
		const delay = Math.random() * 3; // Retraso aleatorio entre 0s y 3s

		// Estilo de la estrella
		star.className = `absolute bg-white rounded-lg animate-[fall]`; // Usar la animación personalizada
		star.style.width = `${size}px`;
		star.style.height = `${size}px`;
		star.style.left = `${positionX}px`;
		star.style.animationDuration = `${duration}s`;
		star.style.animationDelay = `${delay}s`;

		// Agregar la estrella al contenedor
		if (starContainer) starContainer.appendChild(star);

		// Eliminar estrella al terminar la animación
		setTimeout(() => star.remove(), (duration + delay) * 1000);
	};

	// Crear estrellas constantemente
	setInterval(() => createStar(), 100);

</script>-->